image:
  pullPolicy: IfNotPresent
  repository: registry.rocket.chat/rocketchat/rocket.chat
  tag: "7.9.3"  # Updated Rocket.Chat version

mongodb:
  enabled: true
  auth:
    passwords:
      - "RocketChat2024!"  # Production password
    rootPassword: "MongoRoot2024!"  # Production root password
  architecture: "replicaset"
  replicaCount: 1  # Single-node MicroK8s; replicaset required for Oplog but only 1 member
  persistence:
    enabled: true
    size: 20Gi  # Increased for production demo
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

microservices:
  enabled: true  # Enable Rocket.Chat microservices

host: "chat.canepro.me"  # Your Rocket.Chat domain

ingress:
  enabled: true
  ingressClassName: public
  annotations:
    cert-manager.io/cluster-issuer: "production-cert-issuer"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
  tls:
    - secretName: rocketchat-tls
      hosts:
        - "chat.canepro.me"  # Your Rocket.Chat domain

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: "30s"
    scrapeTimeout: "10s"
    path: "/metrics"
    port: "http"

# Service configuration
service:
  type: ClusterIP
  port: 80
  annotations: {}

# Pod configuration
replicaCount: 1  # Start with one pod; scale after validating capacity

# Resource limits and requests - Targeting ~4 vCPU / 16GiB VM
resources:
  requests:
    cpu: 800m
    memory: 2Gi
  limits:
    cpu: 2000m
    memory: 4Gi

# Extra environment variables for monitoring and production
extraEnv:
  - name: PROMETHEUS_METRICS
    value: "true"
  - name: MONITORING_ENABLED
    value: "true"
  - name: NODE_ENV
    value: "production"
  - name: ROOT_URL
    value: "https://chat.canepro.me"

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Security context
securityContext:
  runAsUser: 999
  runAsGroup: 999
  fsGroup: 999

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60  # Increased for production
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Persistence configuration
persistence:
  enabled: true
  size: 20Gi  # Increased for app data

# Horizontal Pod Autoscaler (disabled for single-node)
autoscaling:
  enabled: false

# Network policies
networkPolicy:
  enabled: false  # Disabled for single-node setup

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"
