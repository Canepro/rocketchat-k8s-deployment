# Backup Automation Pipeline
# Azure DevOps pipeline for automated backups

trigger: none

parameters:
- name: backup_type
  displayName: 'Type of backup to perform'
  type: string
  default: 'all'
  values:
  - all
  - mongodb
  - cluster-state
  - snapshots
  - validate

variables:
  clusterName: 'rocketchat-aks'
  resourceGroup: 'rocketchat-k8s-rg'
  keyVaultName: 'rocketchat-kv'
  backupStorageAccount: 'rocketchatbackups'

stages:
- stage: MongoDBBackup
  displayName: 'MongoDB Backup'
  condition: and(succeeded(), or(eq('${{ parameters.backup_type }}', 'mongodb'), eq('${{ parameters.backup_type }}', 'all')))
  jobs:
  - job: MongoDBBackupJob
    displayName: 'Backup MongoDB Data'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Setup Azure CLI'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name aks-preview
          az aks get-credentials --name $(clusterName) --resource-group $(resourceGroup) --overwrite
          
    - task: AzureCLI@2
      displayName: 'Backup MongoDB Data'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          chmod +x scripts/backup/mongodb-backup.sh
          ./scripts/backup/mongodb-backup.sh
          
    - task: AzureCLI@2
      displayName: 'Validate MongoDB Backup'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          chmod +x scripts/backup/backup-validation.sh
          ./scripts/backup/backup-validation.sh

- stage: SnapshotPVCs
  displayName: 'Snapshot PVCs'
  condition: and(succeeded(), or(eq('${{ parameters.backup_type }}', 'snapshots'), eq('${{ parameters.backup_type }}', 'all')))
  jobs:
  - job: SnapshotJob
    displayName: 'Create PVC Snapshots'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Setup Azure CLI'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name aks-preview
          az aks get-credentials --name $(clusterName) --resource-group $(resourceGroup) --overwrite
          
    - task: AzureCLI@2
      displayName: 'Create PVC Snapshots'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          chmod +x scripts/backup/create-pvc-snapshots.sh
          ./scripts/backup/create-pvc-snapshots.sh

- stage: ClusterStateBackup
  displayName: 'Cluster State Backup'
  condition: and(succeeded(), or(eq('${{ parameters.backup_type }}', 'cluster-state'), eq('${{ parameters.backup_type }}', 'all')))
  jobs:
  - job: ClusterStateBackupJob
    displayName: 'Backup Cluster State'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Setup Azure CLI'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name aks-preview
          az aks get-credentials --name $(clusterName) --resource-group $(resourceGroup) --overwrite
          
    - task: AzureCLI@2
      displayName: 'Backup Cluster State'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          chmod +x scripts/backup/backup-cluster-state.sh
          ./scripts/backup/backup-cluster-state.sh

- stage: ValidateBackups
  displayName: 'Validate Backups'
  condition: and(succeeded(), or(eq('${{ parameters.backup_type }}', 'validate'), always()))
  dependsOn: [MongoDBBackup, SnapshotPVCs, ClusterStateBackup]
  jobs:
  - job: ValidateBackupsJob
    displayName: 'Validate All Backups'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Setup Azure CLI'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name aks-preview
          
    - task: AzureCLI@2
      displayName: 'Validate All Backups'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          chmod +x scripts/backup/backup-integrity-check.sh
          ./scripts/backup/backup-integrity-check.sh
