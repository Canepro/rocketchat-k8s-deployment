# Subscription Monitor Pipeline
# Azure DevOps pipeline for subscription suspension detection and recovery

trigger: none

parameters:
- name: check_type
  displayName: 'Type of check to perform'
  type: string
  default: 'all'
  values:
  - all
  - current
  - forecast
  - alerts
  - optimization

variables:
  clusterName: 'rocketchat-aks'
  resourceGroup: 'rocketchat-k8s-rg'
  subscriptionId: '$(AZURE_SUBSCRIPTION_ID)'

stages:
- stage: CheckAzureCosts
  displayName: 'Check Azure Costs'
  condition: and(succeeded(), or(eq('${{ parameters.check_type }}', 'current'), eq('${{ parameters.check_type }}', 'all')))
  jobs:
  - job: CostCheckJob
    displayName: 'Check Current Costs'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Get Current Month Costs'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get current month costs
          CURRENT_MONTH=$(date +%Y-%m)
          echo "Checking costs for: $CURRENT_MONTH"
          
          # Get costs by resource group
          az consumption usage list \
            --billing-period-name "$CURRENT_MONTH" \
            --query "[?contains(instanceName, '$(resourceGroup)')].{Resource:instanceName,Cost:pretaxCost,Currency:currency}" \
            -o table
              
    - task: AzureCLI@2
      displayName: 'Get Cost Trends'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get cost trends for the last 7 days
          az consumption usage list \
            --start-date $(date -d '7 days ago' +%Y-%m-%d) \
            --end-date $(date +%Y-%m-%d) \
            --query "[?contains(instanceName, '$(resourceGroup)')].{Date:usageStart,Resource:instanceName,Cost:pretaxCost}" \
            -o table

- stage: ForecastExhaustion
  displayName: 'Forecast Credit Exhaustion'
  condition: and(succeeded(), or(eq('${{ parameters.check_type }}', 'forecast'), eq('${{ parameters.check_type }}', 'all')))
  jobs:
  - job: ForecastJob
    displayName: 'Calculate Daily Spend and Forecast'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Calculate Daily Spend'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get current month costs
          CURRENT_MONTH=$(date +%Y-%m)
          CURRENT_DAY=$(date +%d)
          
          # Get total cost for current month
          TOTAL_COST=$(az consumption usage list \
            --billing-period-name "$CURRENT_MONTH" \
            --query "sum([?contains(instanceName, '$(resourceGroup)')].pretaxCost)" \
            -o tsv)
            
          # Calculate daily average
          DAILY_AVERAGE=$(echo "scale=2; $TOTAL_COST / $CURRENT_DAY" | bc)
          
          # Calculate projected monthly cost
          PROJECTED_MONTHLY=$(echo "scale=2; $DAILY_AVERAGE * 30" | bc)
          
          echo "Current month cost: $TOTAL_COST"
          echo "Daily average: $DAILY_AVERAGE"
          echo "Projected monthly: $PROJECTED_MONTHLY"
          
          # Check against credit limit
          CREDIT_LIMIT=100
          if (( $(echo "$PROJECTED_MONTHLY > $CREDIT_LIMIT" | bc -l) )); then
            echo "WARNING: Projected monthly cost ($PROJECTED_MONTHLY) exceeds credit limit ($CREDIT_LIMIT)"
            echo "Consider running teardown pipeline"
          else
            echo "Projected monthly cost is within credit limit"
          fi

- stage: AlertThreshold
  displayName: 'Check Alert Thresholds'
  condition: and(succeeded(), or(eq('${{ parameters.check_type }}', 'alerts'), eq('${{ parameters.check_type }}', 'all')))
  jobs:
  - job: AlertJob
    displayName: 'Check Cost Alerts'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Check Cost Alerts'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get current month costs
          CURRENT_MONTH=$(date +%Y-%m)
          TOTAL_COST=$(az consumption usage list \
            --billing-period-name "$CURRENT_MONTH" \
            --query "sum([?contains(instanceName, '$(resourceGroup)')].pretaxCost)" \
            -o tsv)
            
          # Define alert thresholds
          WARNING_THRESHOLD=60  # 60% of credit limit
          CRITICAL_THRESHOLD=80  # 80% of credit limit
          CREDIT_LIMIT=100
          
          WARNING_AMOUNT=$(echo "scale=2; $CREDIT_LIMIT * $WARNING_THRESHOLD / 100" | bc)
          CRITICAL_AMOUNT=$(echo "scale=2; $CREDIT_LIMIT * $CRITICAL_THRESHOLD / 100" | bc)
          
          echo "Current cost: $TOTAL_COST"
          echo "Warning threshold: $WARNING_AMOUNT"
          echo "Critical threshold: $CRITICAL_AMOUNT"
          
          if (( $(echo "$TOTAL_COST > $CRITICAL_AMOUNT" | bc -l) )); then
            echo "CRITICAL: Cost exceeds critical threshold"
            echo "Action required: Run teardown pipeline immediately"
          elif (( $(echo "$TOTAL_COST > $WARNING_AMOUNT" | bc -l) )); then
            echo "WARNING: Cost exceeds warning threshold"
            echo "Consider running teardown pipeline"
          else
            echo "Cost is within acceptable limits"
          fi

- stage: RecommendActions
  displayName: 'Recommend Actions'
  condition: and(succeeded(), or(eq('${{ parameters.check_type }}', 'optimization'), eq('${{ parameters.check_type }}', 'all')))
  jobs:
  - job: RecommendJob
    displayName: 'Generate Optimization Recommendations'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Analyze Resource Usage'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get resource usage
          echo "Analyzing resource usage..."
          
          # Get VM sizes and costs
          az vm list \
            --resource-group $(resourceGroup) \
            --query "[].{Name:name,Size:hardwareProfile.vmSize,Status:provisioningState}" \
            -o table
            
    - task: AzureCLI@2
      displayName: 'Generate Optimization Recommendations'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get current costs
          CURRENT_MONTH=$(date +%Y-%m)
          TOTAL_COST=$(az consumption usage list \
            --billing-period-name "$CURRENT_MONTH" \
            --query "sum([?contains(instanceName, '$(resourceGroup)')].pretaxCost)" \
            -o tsv)
            
          echo "Cost optimization recommendations:"
          echo "Current monthly cost: $TOTAL_COST"
          
          if (( $(echo "$TOTAL_COST > 80" | bc -l) )); then
            echo "1. Consider running teardown pipeline to reduce costs"
            echo "2. Switch to lightweight monitoring to save Â£5-10/month"
            echo "3. Review resource sizes and optimize"
          elif (( $(echo "$TOTAL_COST > 60" | bc -l) )); then
            echo "1. Monitor costs closely"
            echo "2. Consider switching to lightweight monitoring"
            echo "3. Review resource optimization opportunities"
          else
            echo "1. Costs are within acceptable limits"
            echo "2. Continue monitoring"
            echo "3. Consider full monitoring if needed"
          fi

- stage: NotifyCostStatus
  displayName: 'Notify Cost Status'
  condition: always()
  dependsOn: [CheckAzureCosts, ForecastExhaustion, AlertThreshold, RecommendActions]
  jobs:
  - job: NotifyJob
    displayName: 'Notify Cost Status'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Notify Cost Status'
      inputs:
        azureSubscription: 'Azure-ServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Cost monitoring pipeline completed"
          echo "Check type: ${{ parameters.check_type }}"
          echo "Status: ${{ variables['Agent.JobStatus'] }}"
