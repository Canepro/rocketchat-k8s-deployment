# Rocket.Chat Tracing Sidecar Configuration
# Alternative approach using sidecar container for tracing

apiVersion: v1
kind: ConfigMap
metadata:
  name: rocketchat-tracing-sidecar
  namespace: rocketchat
data:
  tracing-sidecar.js: |
    // OpenTelemetry sidecar for Rocket.Chat tracing
    const { NodeSDK } = require('@opentelemetry/sdk-node');
    const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
    const { OTLPTraceExporter } = require('@opentelemetry/exporter-otlp-http');
    const { Resource } = require('@opentelemetry/resources');
    const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');

    // Configure the OpenTelemetry SDK
    const sdk = new NodeSDK({
      resource: new Resource({
        [SemanticResourceAttributes.SERVICE_NAME]: 'rocket-chat',
        [SemanticResourceAttributes.SERVICE_VERSION]: '1.0.0',
        [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: 'production',
      }),
      traceExporter: new OTLPTraceExporter({
        url: 'http://otel-collector.monitoring.svc.cluster.local:4318/v1/traces',
      }),
      instrumentations: [
        getNodeAutoInstrumentations({
          '@opentelemetry/instrumentation-fs': { enabled: false },
          '@opentelemetry/instrumentation-net': { enabled: true },
          '@opentelemetry/instrumentation-http': { enabled: true },
          '@opentelemetry/instrumentation-express': { enabled: true },
          '@opentelemetry/instrumentation-mongodb': { enabled: true },
        }),
      ],
    });

    // Initialize the SDK
    sdk.start();
    console.log('OpenTelemetry sidecar tracing initialized');

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rocketchat-with-tracing
  namespace: rocketchat
spec:
  replicas: 2
  selector:
    matchLabels:
      app: rocketchat
  template:
    metadata:
      labels:
        app: rocketchat
    spec:
      containers:
      # Main Rocket.Chat container
      - name: rocketchat
        image: rocketchat/rocket.chat:latest
        ports:
        - containerPort: 3000
        env:
        - name: ROOT_URL
          value: "https://chat.canepro.me"
        - name: MONGO_URL
          value: "mongodb://mongodb:27017/rocketchat"
        - name: PORT
          value: "3000"
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /api/v1/info
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/info
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      
      # OpenTelemetry tracing sidecar
      - name: tracing-sidecar
        image: node:18-alpine
        command: ["node", "/app/tracing-sidecar.js"]
        env:
        - name: OTEL_SERVICE_NAME
          value: "rocket-chat"
        - name: OTEL_SERVICE_VERSION
          value: "1.0.0"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.monitoring.svc.cluster.local:4318/v1/traces"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=rocket-chat,service.version=1.0.0,deployment.environment=production"
        volumeMounts:
        - name: tracing-config
          mountPath: /app/tracing-sidecar.js
          subPath: tracing-sidecar.js
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
      volumes:
      - name: tracing-config
        configMap:
          name: rocketchat-tracing-sidecar
