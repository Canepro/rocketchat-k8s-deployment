# Horizontal Pod Autoscaler Configuration for Rocket.Chat AKS Deployment
# Provides automatic scaling based on CPU, memory, and custom metrics

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rocketchat-hpa
  namespace: rocketchat
  labels:
    app: rocketchat
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rocketchat-rocketchat
  minReplicas: 1
  maxReplicas: 10
  metrics:
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metrics for Rocket.Chat
  - type: Pods
    pods:
      metric:
        name: rocketchat_active_users
      target:
        type: AverageValue
        averageValue: "50"
  - type: Pods
    pods:
      metric:
        name: rocketchat_messages_per_second
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      policies:
      - type: Percent
        value: 10  # Scale down by max 10% at a time
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60   # 1 minute
      policies:
      - type: Percent
        value: 50  # Scale up by max 50% at a time
        periodSeconds: 60
      - type: Pods
        value: 2   # Or scale up by max 2 pods at a time
        periodSeconds: 60
      selectPolicy: Max  # Use the policy that allows the highest change

---
# HPA for Rocket.Chat Microservices
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rocketchat-ddp-streamer-hpa
  namespace: rocketchat
  labels:
    app: rocketchat-ddp-streamer
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rocketchat-ddp-streamer
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  - type: Pods
    pods:
      metric:
        name: rocketchat_ddp_connections
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# HPA for MongoDB (if using StatefulSet)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mongodb-hpa
  namespace: rocketchat
  labels:
    app: mongodb
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: mongodb
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: mongodb_connections
      target:
        type: AverageValue
        averageValue: "50"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # 10 minutes for database
      policies:
      - type: Percent
        value: 5
        periodSeconds: 120
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60

---
# Vertical Pod Autoscaler for resource optimization
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: rocketchat-vpa
  namespace: rocketchat
  labels:
    app: rocketchat
    component: vpa
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rocketchat-rocketchat
  updatePolicy:
    updateMode: "Auto"  # Automatically apply recommendations
  resourcePolicy:
    containerPolicies:
    - containerName: rocketchat
      minAllowed:
        cpu: 100m
        memory: 128Mi
      maxAllowed:
        cpu: 2000m
        memory: 4Gi
      controlledResources: ["cpu", "memory"]
      controlledValues: RequestsAndLimits

---
# VPA for MongoDB
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: mongodb-vpa
  namespace: rocketchat
  labels:
    app: mongodb
    component: vpa
spec:
  targetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: mongodb
  updatePolicy:
    updateMode: "Initial"  # Only apply initial recommendations
  resourcePolicy:
    containerPolicies:
    - containerName: mongodb
      minAllowed:
        cpu: 100m
        memory: 256Mi
      maxAllowed:
        cpu: 2000m
        memory: 8Gi
      controlledResources: ["cpu", "memory"]
      controlledValues: RequestsAndLimits

---
# Cluster Autoscaler configuration (requires cluster autoscaler addon)
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-autoscaler-status
  namespace: kube-system
data:
  nodes.max: "10"
  nodes.min: "2"
  scale-down-enabled: "true"
  scale-down-delay-after-add: "10m"
  scale-down-unneeded-time: "10m"
  skip-nodes-with-local-storage: "false"
  skip-nodes-with-system-pods: "false"

---
# Custom metrics for autoscaling
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: rocketchat-custom-metrics
  namespace: monitoring
  labels:
    app: rocketchat
spec:
  selector:
    matchLabels:
      app: rocketchat
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'rocketchat_(active_users|messages_per_second|ddp_connections)'
      targetLabel: __name__
      replacement: '${1}'
