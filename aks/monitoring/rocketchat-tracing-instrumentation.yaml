# Rocket.Chat OpenTelemetry Instrumentation
# Adds distributed tracing to Rocket.Chat deployment

apiVersion: v1
kind: ConfigMap
metadata:
  name: rocketchat-tracing-config
  namespace: rocketchat
data:
  tracing.js: |
    // OpenTelemetry instrumentation for Rocket.Chat
    const { NodeSDK } = require('@opentelemetry/sdk-node');
    const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
    const { OTLPTraceExporter } = require('@opentelemetry/exporter-otlp-http');
    const { Resource } = require('@opentelemetry/resources');
    const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');

    // Configure the OpenTelemetry SDK
    const sdk = new NodeSDK({
      resource: new Resource({
        [SemanticResourceAttributes.SERVICE_NAME]: 'rocket-chat',
        [SemanticResourceAttributes.SERVICE_VERSION]: process.env.ROCKETCHAT_VERSION || '1.0.0',
        [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: process.env.NODE_ENV || 'production',
      }),
      traceExporter: new OTLPTraceExporter({
        url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://otel-collector.monitoring.svc.cluster.local:4318/v1/traces',
      }),
      instrumentations: [
        getNodeAutoInstrumentations({
          // Disable some instrumentations that might conflict with Rocket.Chat
          '@opentelemetry/instrumentation-fs': {
            enabled: false,
          },
          '@opentelemetry/instrumentation-net': {
            enabled: true,
          },
          '@opentelemetry/instrumentation-http': {
            enabled: true,
            requestHook: (span, request) => {
              span.setAttributes({
                'http.method': request.method,
                'http.url': request.url,
                'service.name': 'rocket-chat',
              });
            },
          },
          '@opentelemetry/instrumentation-express': {
            enabled: true,
          },
          '@opentelemetry/instrumentation-mongodb': {
            enabled: true,
          },
        }),
      ],
    });

    // Initialize the SDK
    sdk.start();

    // Graceful shutdown
    process.on('SIGTERM', () => {
      sdk.shutdown()
        .then(() => console.log('Tracing terminated'))
        .catch((error) => console.log('Error terminating tracing', error))
        .finally(() => process.exit(0));
    });

    console.log('OpenTelemetry tracing initialized for Rocket.Chat');

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rocketchat-tracing-patch
  namespace: rocketchat
spec:
  template:
    spec:
      containers:
      - name: rocketchat
        env:
        # OpenTelemetry configuration
        - name: OTEL_SERVICE_NAME
          value: "rocket-chat"
        - name: OTEL_SERVICE_VERSION
          value: "1.0.0"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.monitoring.svc.cluster.local:4318/v1/traces"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=rocket-chat,service.version=1.0.0,deployment.environment=production"
        - name: OTEL_LOG_LEVEL
          value: "info"
        - name: NODE_OPTIONS
          value: "--require /app/tracing.js"
        volumeMounts:
        - name: tracing-config
          mountPath: /app/tracing.js
          subPath: tracing.js
      volumes:
      - name: tracing-config
        configMap:
          name: rocketchat-tracing-config
