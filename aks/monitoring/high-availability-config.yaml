# High Availability Configuration for Rocket.Chat AKS Deployment
# Implements multi-zone deployment, pod disruption budgets, and anti-affinity rules

# Pod Disruption Budget for Rocket.Chat
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rocketchat-pdb
  namespace: rocketchat
  labels:
    app: rocketchat
    component: pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rocketchat
      app.kubernetes.io/instance: rocketchat

---
# Pod Disruption Budget for MongoDB
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mongodb-pdb
  namespace: rocketchat
  labels:
    app: mongodb
    component: pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mongodb

---
# Pod Disruption Budget for Monitoring Stack
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: prometheus-pdb
  namespace: monitoring
  labels:
    app: prometheus
    component: pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: grafana-pdb
  namespace: monitoring
  labels:
    app: grafana
    component: pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana

---
# Anti-affinity rules for high availability
apiVersion: v1
kind: ConfigMap
metadata:
  name: ha-affinity-rules
  namespace: rocketchat
data:
  rocketchat-affinity.yaml: |
    # Anti-affinity configuration for Rocket.Chat
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - rocketchat
            topologyKey: topology.kubernetes.io/zone
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - rocketchat
          topologyKey: kubernetes.io/hostname
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
            - key: node-type
              operator: In
              values:
              - compute-optimized
        - weight: 50
          preference:
            matchExpressions:
            - key: availability-zone
              operator: In
              values:
              - "1"
              - "2"
              - "3"

---
# Network policies for security and isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rocketchat-network-policy
  namespace: rocketchat
  labels:
    app: rocketchat
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rocketchat
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from NGINX ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  # Allow internal communication between Rocket.Chat pods
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: rocketchat
    ports:
    - protocol: TCP
      port: 3000
  # Allow communication with MongoDB
  - from:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # Allow outbound to MongoDB
  - to:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 27017
  # Allow outbound to monitoring
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  # Allow outbound to external services
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Network policy for MongoDB
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mongodb-network-policy
  namespace: rocketchat
  labels:
    app: mongodb
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: mongodb
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow MongoDB access from Rocket.Chat
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: rocketchat
    ports:
    - protocol: TCP
      port: 27017
  # Allow MongoDB replica set communication
  - from:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 27017
  egress:
  # Allow MongoDB replica set communication
  - to:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 27017
  # Allow outbound to external services
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Priority classes for critical workloads
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: rocketchat-critical
  labels:
    app: rocketchat
    component: priority-class
value: 1000000
globalDefault: false
description: "Critical priority class for Rocket.Chat components"

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: mongodb-critical
  labels:
    app: mongodb
    component: priority-class
value: 2000000
globalDefault: false
description: "Critical priority class for MongoDB components"

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: monitoring-high
  labels:
    app: monitoring
    component: priority-class
value: 500000
globalDefault: false
description: "High priority class for monitoring components"

---
# Service mesh configuration (if using Istio)
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: rocketchat-destination-rule
  namespace: rocketchat
  labels:
    app: rocketchat
    component: istio
spec:
  host: rocketchat-rocketchat
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 50
        maxRequestsPerConnection: 2
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    loadBalancer:
      simple: LEAST_CONN
    outlierDetection:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50

---
# Multi-zone deployment configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: multi-zone-config
  namespace: rocketchat
data:
  deployment-strategy.yaml: |
    # Multi-zone deployment strategy
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 1
    
    # Node selector for multi-zone
    nodeSelector:
      topology.kubernetes.io/zone: "1"  # Primary zone
    
    # Tolerations for zone-specific nodes
    tolerations:
    - key: "zone"
      operator: "Equal"
      value: "1"
      effect: "NoSchedule"
    
    # Affinity for zone distribution
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - rocketchat
            topologyKey: topology.kubernetes.io/zone

---
# Backup and disaster recovery configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: disaster-recovery-config
  namespace: rocketchat
data:
  backup-schedule.yaml: |
    # Automated backup schedule
    schedule: "0 2 * * *"  # Daily at 2 AM
    retention: "7d"
    backup_type: "full"
    compression: "gzip"
    encryption: "aes-256"
    
    # Cross-region backup
    cross_region:
      enabled: true
      target_region: "eastus"
      replication_lag: "1h"
    
    # Point-in-time recovery
    pitr:
      enabled: true
      retention: "24h"
      interval: "15m"

---
# Health check endpoints for load balancer
apiVersion: v1
kind: Service
metadata:
  name: rocketchat-health-check
  namespace: rocketchat
  labels:
    app: rocketchat
    component: health-check
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: "/health"
    service.beta.kubernetes.io/azure-load-balancer-health-probe-interval: "10"
    service.beta.kubernetes.io/azure-load-balancer-health-probe-num-of-probe: "3"
    service.beta.kubernetes.io/azure-load-balancer-health-probe-timeout: "5"
spec:
  selector:
    app.kubernetes.io/name: rocketchat
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
  type: LoadBalancer
  loadBalancerSourceRanges:
  - "0.0.0.0/0"  # Restrict to specific IPs in production
