# Official Rocket.Chat Helm Chart Configuration
# Based on: https://docs.rocket.chat/docs/deploy-with-kubernetes

image:
  pullPolicy: IfNotPresent
  repository: registry.rocket.chat/rocketchat/rocket.chat
  tag: "7.9.3"  # Rocket.Chat release version

mongodb:
  enabled: true
  auth:
    passwords:
      - "rocketchat"
    rootPassword: "rocketchatroot"
  architecture: "replicaset"
  replicaCount: 3

# Enable microservices for better scalability (optional)
microservices:
  enabled: true
  presence:
    replicas: 1
  ddpStreamer:
    replicas: 2
  account:
    replicas: 1
  authorization:
    replicas: 1
  streamHub:
    replicas: 1
  nats:
    replicas: 1

host: "chat.canepro.me"  # Your Rocket.Chat domain

ingress:
  enabled: true
  ingressClassName: "nginx"  # Ingress controller in K8s cluster
  annotations:
    cert-manager.io/cluster-issuer: "production-cert-issuer"  # Your ClusterIssuer name
  tls:
    - secretName: "rocketchat-tls"  # Use different name if preferred
      hosts:
        - "chat.canepro.me"  # Your Rocket.Chat domain

# Enhanced monitoring configuration (optional additions)
# Enable Prometheus metrics scraping for Rocket.Chat
prometheusScraping:
  enabled: true
  port: 9458
  msPort: 9458

# Enable PodMonitor for automated metrics discovery (recommended for v6.25.0+)
podMonitor:
  enabled: true
  interval: 30s

# Legacy ServiceMonitor (keeping for backward compatibility)
serviceMonitor:
  enabled: false

# Legacy monitoring configuration (keeping for compatibility)
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: "30s"
    scrapeTimeout: "10s"
    path: "/metrics"
    port: "http"

# Production-ready resource configuration
replicaCount: 2

resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Security context
securityContext:
  runAsUser: 999
  runAsGroup: 999
  fsGroup: 999

# Health checks
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Persistence for uploads and files
persistence:
  enabled: true
  storageClass: "default"
  size: 30Gi

# Environment variables for production
extraEnv:
  - name: NODE_ENV
    value: "production"
  - name: PROMETHEUS_METRICS
    value: "true"
