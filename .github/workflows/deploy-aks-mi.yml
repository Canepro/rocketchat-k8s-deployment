name: Deploy to AKS (Managed Identity)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - cost-check
        - teardown
        - recreate

env:
  CLUSTER_NAME: 'rocketchat-aks'
  RESOURCE_GROUP: 'rocketchat-k8s-rg'
  SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

jobs:
  deploy:
    runs-on: self-hosted  # Your Azure VM with Managed Identity
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login via Managed Identity
        shell: bash
        run: |
          set -euo pipefail
          echo "Logging in with Managed Identity..."
          az login --identity
          az account set --subscription "$SUBSCRIPTION_ID"
          
          # Verify login
          az account show --query '{name:name, id:id, tenant:tenantId}' -o table
          echo "✅ Azure login successful"

      - name: Get AKS credentials
        if: ${{ inputs.action == 'deploy' || inputs.action == 'recreate' }}
        shell: bash
        run: |
          echo "Getting AKS credentials..."
          az aks get-credentials \
            --name "$CLUSTER_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --overwrite-existing
          
          # Verify cluster access
          kubectl get nodes
          echo "✅ AKS credentials configured"

      - name: Deploy Rocket.Chat
        if: ${{ inputs.action == 'deploy' || inputs.action == 'recreate' }}
        shell: bash
        run: |
          echo "Deploying Rocket.Chat manifests..."
          kubectl apply -k k8s/overlays/production
          
          # Wait for deployment
          kubectl rollout status deployment/rocketchat -n rocketchat --timeout=300s
          echo "✅ Rocket.Chat deployment complete"

      - name: Cost Monitoring Check
        if: ${{ inputs.action == 'cost-check' }}
        shell: bash
        run: |
          echo "Running cost analysis..."
          CURRENT_MONTH=$(date +%Y-%m)
          
          # Get current month costs
          TOTAL_COST=$(az consumption usage list \
            --billing-period-name "$CURRENT_MONTH" \
            --query "sum([?contains(instanceName, '$RESOURCE_GROUP')].pretaxCost)" \
            -o tsv)
          
          echo "Current month cost: $TOTAL_COST"
          
          # Check against budget
          BUDGET_LIMIT=80
          if (( $(echo "$TOTAL_COST > $BUDGET_LIMIT" | bc -l) )); then
            echo "⚠️ WARNING: Cost ($TOTAL_COST) exceeds budget ($BUDGET_LIMIT)"
            exit 1
          else
            echo "✅ Cost within budget"
          fi

      - name: Teardown Cluster
        if: ${{ inputs.action == 'teardown' }}
        shell: bash
        run: |
          echo "Teardown not implemented in this workflow"
          echo "Use Azure DevOps pipeline for teardown operations"

      - name: Recreate Cluster
        if: ${{ inputs.action == 'recreate' }}
        shell: bash
        run: |
          echo "Recreate not implemented in this workflow"
          echo "Use Azure DevOps pipeline for recreation operations"
