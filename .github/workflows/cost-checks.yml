name: Cost Monitoring

on:
  schedule:
    # Run daily cost checks at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of cost check to perform'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - current
        - forecast
        - alerts
        - optimization

env:
  CLUSTER_NAME: rocketchat-aks
  RESOURCE_GROUP: rocketchat-k8s-rg
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  check-azure-costs:
    if: github.event.inputs.check_type == 'current' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Get current month costs
      run: |
        # Get current month costs
        CURRENT_MONTH=$(date +%Y-%m)
        echo "Checking costs for: $CURRENT_MONTH"
        
        # Get costs by resource group
        az consumption usage list \
          --billing-period-name "$CURRENT_MONTH" \
          --query "[?contains(instanceName, '${{ env.RESOURCE_GROUP }}')].{Resource:instanceName,Cost:pretaxCost,Currency:currency}" \
          -o table
          
    - name: Get cost trends
      run: |
        # Get cost trends for the last 7 days
        az consumption usage list \
          --start-date $(date -d '7 days ago' +%Y-%m-%d) \
          --end-date $(date +%Y-%m-%d) \
          --query "[?contains(instanceName, '${{ env.RESOURCE_GROUP }}')].{Date:usageStart,Resource:instanceName,Cost:pretaxCost}" \
          -o table

  forecast-exhaustion:
    if: github.event.inputs.check_type == 'forecast' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Calculate daily spend
      run: |
        # Get current month costs
        CURRENT_MONTH=$(date +%Y-%m)
        CURRENT_DAY=$(date +%d)
        
        # Get total cost for current month
        TOTAL_COST=$(az consumption usage list \
          --billing-period-name "$CURRENT_MONTH" \
          --query "sum([?contains(instanceName, '${{ env.RESOURCE_GROUP }}')].pretaxCost)" \
          -o tsv)
          
        # Calculate daily average
        DAILY_AVERAGE=$(echo "scale=2; $TOTAL_COST / $CURRENT_DAY" | bc)
        
        # Calculate projected monthly cost
        PROJECTED_MONTHLY=$(echo "scale=2; $DAILY_AVERAGE * 30" | bc)
        
        echo "Current month cost: $TOTAL_COST"
        echo "Daily average: $DAILY_AVERAGE"
        echo "Projected monthly: $PROJECTED_MONTHLY"
        
        # Check against credit limit
        CREDIT_LIMIT=100
        if (( $(echo "$PROJECTED_MONTHLY > $CREDIT_LIMIT" | bc -l) )); then
          echo "WARNING: Projected monthly cost ($PROJECTED_MONTHLY) exceeds credit limit ($CREDIT_LIMIT)"
          echo "Consider running teardown workflow"
        else
          echo "Projected monthly cost is within credit limit"
        fi

  alert-threshold:
    if: github.event.inputs.check_type == 'alerts' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Check cost alerts
      run: |
        # Get current month costs
        CURRENT_MONTH=$(date +%Y-%m)
        TOTAL_COST=$(az consumption usage list \
          --billing-period-name "$CURRENT_MONTH" \
          --query "sum([?contains(instanceName, '${{ env.RESOURCE_GROUP }}')].pretaxCost)" \
          -o tsv)
          
        # Define alert thresholds
        WARNING_THRESHOLD=60  # 60% of credit limit
        CRITICAL_THRESHOLD=80  # 80% of credit limit
        CREDIT_LIMIT=100
        
        WARNING_AMOUNT=$(echo "scale=2; $CREDIT_LIMIT * $WARNING_THRESHOLD / 100" | bc)
        CRITICAL_AMOUNT=$(echo "scale=2; $CREDIT_LIMIT * $CRITICAL_THRESHOLD / 100" | bc)
        
        echo "Current cost: $TOTAL_COST"
        echo "Warning threshold: $WARNING_AMOUNT"
        echo "Critical threshold: $CRITICAL_AMOUNT"
        
        if (( $(echo "$TOTAL_COST > $CRITICAL_AMOUNT" | bc -l) )); then
          echo "CRITICAL: Cost exceeds critical threshold"
          echo "Action required: Run teardown workflow immediately"
        elif (( $(echo "$TOTAL_COST > $WARNING_AMOUNT" | bc -l) )); then
          echo "WARNING: Cost exceeds warning threshold"
          echo "Consider running teardown workflow"
        else
          echo "Cost is within acceptable limits"
        fi

  recommend-actions:
    if: github.event.inputs.check_type == 'optimization' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Analyze resource usage
      run: |
        # Get resource usage
        echo "Analyzing resource usage..."
        
        # Get VM sizes and costs
        az vm list \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "[].{Name:name,Size:hardwareProfile.vmSize,Status:provisioningState}" \
          -o table
          
    - name: Generate optimization recommendations
      run: |
        # Get current costs
        CURRENT_MONTH=$(date +%Y-%m)
        TOTAL_COST=$(az consumption usage list \
          --billing-period-name "$CURRENT_MONTH" \
          --query "sum([?contains(instanceName, '${{ env.RESOURCE_GROUP }}')].pretaxCost)" \
          -o tsv)
          
        echo "Cost optimization recommendations:"
        echo "Current monthly cost: $TOTAL_COST"
        
        if (( $(echo "$TOTAL_COST > 80" | bc -l) )); then
          echo "1. Consider running teardown workflow to reduce costs"
          echo "2. Switch to lightweight monitoring to save Â£5-10/month"
          echo "3. Review resource sizes and optimize"
        elif (( $(echo "$TOTAL_COST > 60" | bc -l) )); then
          echo "1. Monitor costs closely"
          echo "2. Consider switching to lightweight monitoring"
          echo "3. Review resource optimization opportunities"
        else
          echo "1. Costs are within acceptable limits"
          echo "2. Continue monitoring"
          echo "3. Consider full monitoring if needed"
        fi

  notify-cost-status:
    if: always()
    needs: [check-azure-costs, forecast-exhaustion, alert-threshold, recommend-actions]
    runs-on: ubuntu-latest
    steps:
    - name: Notify cost status
      run: |
        echo "Cost monitoring workflow completed"
        echo "Check type: ${{ github.event.inputs.check_type || 'scheduled' }}"
        echo "Status: ${{ job.status }}"
        
    - name: Send cost alert
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "Cost monitoring failed for ${{ github.repository }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
