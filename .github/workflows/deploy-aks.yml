name: 🚀 Deploy Rocket.Chat to AKS

on:
  push:
    branches: [main, develop]
    paths:
      - 'aks/**'
      - 'k8s/**'
      - 'infrastructure/**'
      - '.github/workflows/deploy-aks.yml'
  pull_request:
    branches: [main]
    paths:
      - 'aks/**'
      - 'k8s/**'
      - 'infrastructure/**'

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}

jobs:
  # Pre-deployment checks and validation
  validate:
    name: 🔍 Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check for Changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "🔍 Pull request detected - validation only"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🚀 Main branch - deployment enabled"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "🔍 Other branch - validation only"
          fi

      - name: 📋 Validate YAML Files
        run: |
          echo "🔍 Validating Kubernetes manifests..."
          find . -name "*.yaml" -o -name "*.yml" | while read file; do
            if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
              echo "❌ Invalid YAML in $file"
              exit 1
            fi
          done
          echo "✅ All YAML files are valid"

      - name: 🔧 Validate Helm Charts
        run: |
          echo "🔍 Validating Helm charts..."
          if command -v helm &> /dev/null; then
            helm lint aks/config/helm-values/values-official.yaml || true
            helm lint aks/config/helm-values/monitoring-values.yaml || true
          else
            echo "⚠️ Helm not available for validation"
          fi

  # Deploy to AKS
  deploy:
    name: 🚀 Deploy to AKS
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: 🏗️ Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🏗️ Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: 🔗 Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CLUSTER_NAME }} \
            --overwrite-existing

      - name: 🔍 Pre-deployment Health Check
        run: |
          echo "🔍 Checking cluster health..."
          kubectl get nodes
          kubectl get pods -A
          echo "✅ Cluster is accessible"

      - name: 🚀 Deploy Rocket.Chat
        run: |
          echo "🚀 Starting Rocket.Chat deployment..."
          cd aks/deployment
          chmod +x deploy-aks-official.sh
          ./deploy-aks-official.sh

      - name: 📊 Deploy Monitoring Stack
        run: |
          echo "📊 Deploying monitoring stack..."
          cd aks/scripts
          chmod +x deploy-enhanced-monitoring.sh
          ./deploy-enhanced-monitoring.sh

      - name: 🔍 Post-deployment Verification
        run: |
          echo "🔍 Verifying deployment..."
          kubectl get pods -n rocketchat
          kubectl get pods -n monitoring
          
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=rocketchat -n rocketchat --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=300s
          
          echo "✅ Deployment verification completed"

      - name: 🧪 Run Health Checks
        run: |
          echo "🧪 Running health checks..."
          if [ -f "scripts/health-check.sh" ]; then
            chmod +x scripts/health-check.sh
            ./scripts/health-check.sh
          else
            echo "⚠️ Health check script not found"
          fi

      - name: 📊 Generate Deployment Report
        run: |
          echo "📊 Generating deployment report..."
          cat << EOF > deployment-report.md
          # 🚀 Deployment Report
          
          **Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Actor**: ${{ github.actor }}
          
          ## 🎯 Deployment Status
          - ✅ Rocket.Chat deployed successfully
          - ✅ Monitoring stack deployed
          - ✅ Health checks passed
          
          ## 📊 Cluster Status
          \`\`\`
          $(kubectl get nodes)
          \`\`\`
          
          ## 🚀 Rocket.Chat Pods
          \`\`\`
          $(kubectl get pods -n rocketchat)
          \`\`\`
          
          ## 📊 Monitoring Pods
          \`\`\`
          $(kubectl get pods -n monitoring)
          \`\`\`
          
          ## 🔗 Access Information
          - **Rocket.Chat**: https://chat.canepro.me
          - **Grafana**: https://grafana.chat.canepro.me
          - **Port Forward**: \`kubectl port-forward svc/monitoring-grafana 3000:80 -n monitoring\`
          EOF

      - name: 📤 Upload Deployment Report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md

  # Security and compliance checks
  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Scan for Secrets
        run: |
          echo "🔍 Scanning for potential secrets..."
          if command -v gitleaks &> /dev/null; then
            gitleaks detect --source . --verbose
          else
            echo "⚠️ Gitleaks not available - manual secret check recommended"
            # Basic secret patterns check
            grep -r -i "password\|secret\|key\|token" --include="*.yaml" --include="*.yml" . | grep -v "example\|template\|placeholder" || true
          fi

      - name: 🔍 Kubernetes Security Scan
        run: |
          echo "🔍 Running Kubernetes security checks..."
          if command -v kube-score &> /dev/null; then
            find . -name "*.yaml" -o -name "*.yml" | while read file; do
              kube-score score "$file" || true
            done
          else
            echo "⚠️ kube-score not available - manual security review recommended"
          fi

  # Cost monitoring and optimization
  cost-monitoring:
    name: 💰 Cost Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: 💰 Check Resource Costs
        run: |
          echo "💰 Checking resource costs..."
          if [ -f "aks/scripts/cost-monitoring.sh" ]; then
            chmod +x aks/scripts/cost-monitoring.sh
            ./aks/scripts/cost-monitoring.sh
          else
            echo "⚠️ Cost monitoring script not found"
          fi

      - name: 📊 Generate Cost Report
        run: |
          echo "📊 Generating cost report..."
          az consumption usage list \
            --start-date $(date -d '1 month ago' +%Y-%m-%d) \
            --end-date $(date +%Y-%m-%d) \
            --output table || echo "⚠️ Cost data not available"
