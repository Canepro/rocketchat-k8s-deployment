name: Backup Automation

on:
  schedule:
    # Run daily backups at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Type of backup to perform'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - mongodb
        - cluster-state
        - snapshots
        - validate

env:
  CLUSTER_NAME: rocketchat-aks
  RESOURCE_GROUP: rocketchat-k8s-rg
  KEY_VAULT_NAME: rocketchat-kv
  BACKUP_STORAGE_ACCOUNT: rocketchatbackups

jobs:
  mongodb-backup:
    if: github.event.inputs.backup_type == 'mongodb' || github.event.inputs.backup_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials --name ${{ env.CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --overwrite
        
    - name: Backup MongoDB data
      run: |
        chmod +x scripts/backup/mongodb-backup.sh
        ./scripts/backup/mongodb-backup.sh
        
    - name: Validate MongoDB backup
      run: |
        chmod +x scripts/backup/backup-validation.sh
        ./scripts/backup/backup-validation.sh

  snapshot-pvcs:
    if: github.event.inputs.backup_type == 'snapshots' || github.event.inputs.backup_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials --name ${{ env.CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --overwrite
        
    - name: Create PVC snapshots
      run: |
        chmod +x scripts/backup/create-pvc-snapshots.sh
        ./scripts/backup/create-pvc-snapshots.sh

  cluster-state-backup:
    if: github.event.inputs.backup_type == 'cluster-state' || github.event.inputs.backup_type == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials --name ${{ env.CLUSTER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --overwrite
        
    - name: Backup cluster state
      run: |
        chmod +x scripts/backup/backup-cluster-state.sh
        ./scripts/backup/backup-cluster-state.sh

  validate-backups:
    if: github.event.inputs.backup_type == 'validate' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        auth-type: SERVICE_PRINCIPAL
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Validate all backups
      run: |
        chmod +x scripts/backup/backup-integrity-check.sh
        ./scripts/backup/backup-integrity-check.sh

  notify:
    if: always()
    needs: [mongodb-backup, snapshot-pvcs, cluster-state-backup, validate-backups]
    runs-on: ubuntu-latest
    steps:
    - name: Notify backup completion
      run: |
        echo "Backup automation workflow completed"
        echo "Backup type: ${{ github.event.inputs.backup_type || 'scheduled' }}"
        echo "Status: ${{ job.status }}"
        
    - name: Send Slack notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "Backup automation failed for ${{ github.repository }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
